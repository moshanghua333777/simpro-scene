(e 0 ((CZMLGenerator :? :? :?) nil nil) "bs:Boat on Map")
(i 1 ((Boat :?crs :? :?lab :? :? :? :?) nil nil))
(i 2 ((Clock :? :?t) nil nil))
(x 3 (not (CZMLSpan :? :?lab :?) nil nil) "bs:Boat on Map" 0 (:?crs :?lab :?t) #object[clojure.core$eval13892$fn__13893 0x63c49f65 "clojure.core$eval13892$fn__13893@63c49f65"])
(e 1 ((Boat :?ocrs :? :?lab :? :? :? :?) nil nil) "bs:Boat Change Course")
(x 4 ((NewCourse :?lab :?ncrs :?) nil nil) "bs:Boat Change Course" 0 (:?ncrs :?lab :?fids :?ocrs) #object[clojure.core$eval13898$fn__13899 0x1a81cac1 "clojure.core$eval13898$fn__13899@1a81cac1"])
(e 5 ((Boat :?crs :? :?boat UNDEFINED :? :? :?taa) nil nil) "bs:Boat Sail Point")
(x 6 ((Wind :?wnd :? :? :? :? :? :?) nil nil) "bs:Boat Sail Point" 0 (:?crs :?fids :?boat :?wnd :?taa) #object[clojure.core$eval13903$fn__13904 0x2f549191 "clojure.core$eval13903$fn__13904@2f549191"])
(ex 1 ((Boat :? :? :?lab :?slp :?spd :? :?) nil nil) "bs:Boat Speed" 0 (:?spd :?lab :?slp) #object[clojure.core$eval13907$fn__13908 0x3c851f5d "clojure.core$eval13907$fn__13908@3c851f5d"])
(e 7 ((Onboard :?boat :?heel :? :?view) nil nil) "bs:Boat Heel")
(x 1 ((Boat :? :? :?boat :?sp :? :?tk :?) nil nil) "bs:Boat Heel" 0 (:?view :?tk :?heel :?fids :?boat :?sp) #object[clojure.core$eval13914$fn__13915 0x7bfd801f "clojure.core$eval13914$fn__13915@7bfd801f"])
(e 7 ((Onboard :?boat :? :? :?) nil nil) "bs:Boat Pitching")
(i 8 ((Wave :? :?pit :?pin) nil nil))
(i 9 ((BoatPitch :?boat :? :?slp :?tim) nil nil))
(x 2 ((Clock :? :?t) (:?tim :?t) #object[clojure.core$eval13919$fn__13920 0x6fbe8a63 "clojure.core$eval13919$fn__13920@6fbe8a63"]) "bs:Boat Pitching" 0 (:?pit :?pin :?slp :?fids :?boat :?t) #object[clojure.core$eval13923$fn__13924 0x646d461c "clojure.core$eval13923$fn__13924@646d461c"])
(e 7 ((Onboard :?boat :? :? :?view) nil nil) "bs:Boat Camera Check")
(i 10 ((CameraCheck :?del :? :?tim) nil nil))
(x 2 ((Clock :? :?t) (:?tim :?t) #object[clojure.core$eval13933$fn__13934 0x7086c23b "clojure.core$eval13933$fn__13934@7086c23b"]) "bs:Boat Camera Check" 0 (:?view :?fids :?boat :?del :?t) #object[clojure.core$eval13937$fn__13938 0x676c594c "clojure.core$eval13937$fn__13938@676c594c"])
(e 2 ((Clock :? :?t1) nil nil) "sim:RetractSecondClock")
(x 2 ((Clock :? :?t2) (:?t1 :?t2) #object[clojure.core$eval13942$fn__13943 0x7c1a3a50 "clojure.core$eval13942$fn__13943@7c1a3a50"]) "sim:RetractSecondClock" -10 (:?fids) #object[clojure.core$eval13946$fn__13947 0x7249ce69 "clojure.core$eval13946$fn__13947@7249ce69"])
(ex 2 ((Clock :? :?t) (:?t) #object[clojure.core$eval13950$fn__13951 0x34184d01 "clojure.core$eval13950$fn__13951@34184d01"]) "sim:Start Simulation" 0 () #object[clojure.core$eval13954$fn__13955 0x313bc4f7 "clojure.core$eval13954$fn__13955@313bc4f7"])
(e 1 ((Boat :? :? :?lab :? :? :?tack :?) nil nil) "ws:Wind Veering")
(i 11 ((Wind :? :? :? :? :? VEERING :?) nil nil))
(x 12 (not (BoatWindShift :?lab :? :?) nil nil) "ws:Wind Veering" -1 (:?tack :?lab :?fids) #object[clojure.core$eval13958$fn__13959 0x1c5eb03a "clojure.core$eval13958$fn__13959@1c5eb03a"])
(e 1 ((Boat :? :? :?lab :? :? :?tack :?) nil nil) "ws:Wind Backing")
(i 13 ((Wind :? :? :? :? :? BACKING :?) nil nil))
(x 12 (not (BoatWindShift :?lab :? :?) nil nil) "ws:Wind Backing" -1 (:?tack :?lab :?fids) #object[clojure.core$eval13962$fn__13963 0x20581f5e "clojure.core$eval13962$fn__13963@20581f5e"])
(ex 6 ((Wind :?dir :? :? :?lat :?lon :? :?) () #object[clojure.core$eval13966$fn__13967 0x565e3e11 "clojure.core$eval13966$fn__13967@565e3e11"]) "ws:Wind on Map" 0 (:?dir :?lon :?lat) #object[clojure.core$eval13970$fn__13971 0x39ad4451 "clojure.core$eval13970$fn__13971@39ad4451"])
(e 6 ((Wind :?dir1 :? :? :? :? :? :?) nil nil) "ws:Wind Change Direction")
(x 14 ((WindChange :? :? :? :?dir2 :? :? :? :? :? :?) (:?dir2 :?dir1) #object[clojure.core$eval13975$fn__13976 0x501bfc3e "clojure.core$eval13975$fn__13976@501bfc3e"]) "ws:Wind Change Direction" 0 (:?dir2 :?fids :?dir1) #object[clojure.core$eval13979$fn__13980 0x30d9bb8c "clojure.core$eval13979$fn__13980@30d9bb8c"])
(ex 6 ((Wind :? :? :? :? :? :?s :?) (:?s) #object[clojure.core$eval13984$fn__13985 0x1750a530 "clojure.core$eval13984$fn__13985@1750a530"]) "ws:Wind Shift End" 0 (:?fids) #object[clojure.core$eval13988$fn__13989 0x448ce447 "clojure.core$eval13988$fn__13989@448ce447"])
(ex 12 ((BoatWindShift :? :? :?) nil nil) "ws:Boat Wind Shift End" 0 (:?fids) #object[clojure.core$eval13992$fn__13993 0x4bf91ae4 "clojure.core$eval13992$fn__13993@4bf91ae4"])
(e 6 ((Wind :?dir :? :? :? :? :? :?) nil nil) "ws:Small Oscillation")
(i 15 ((WindChange :? :? :? :? :? true :?sint :?sos :?t1 :?) nil nil))
(x 2 ((Clock :? :?t2) (:?t1 :?t2) #object[clojure.core$eval13996$fn__13997 0x3601ddcc "clojure.core$eval13996$fn__13997@3601ddcc"]) "ws:Small Oscillation" 0 (:?dir :?sos :?sint :?fids :?t2) #object[clojure.core$eval14000$fn__14001 0x24ea8719 "clojure.core$eval14000$fn__14001@24ea8719"])
(e 6 ((Wind :?dir :? :? :? :? :? :?) nil nil) "ws:Big Oscillation")
(i 15 ((WindChange :? :?bint :?bos :? :? true :? :? :? :?t1) nil nil))
(x 2 ((Clock :? :?t2) (:?t1 :?t2) #object[clojure.core$eval14004$fn__14005 0x767e11f "clojure.core$eval14004$fn__14005@767e11f"]) "ws:Big Oscillation" 0 (:?dir :?bos :?fids :?bint :?t2) #object[clojure.core$eval14008$fn__14009 0x44ae52d "clojure.core$eval14008$fn__14009@44ae52d"])
(e 14 ((WindChange :?a :? :? :? :? :? :? :? :? :?) (:?a) #object[clojure.core$eval14015$fn__14016 0x3c9da7d5 "clojure.core$eval14015$fn__14016@3c9da7d5"]) "ws:WindChange First")
(x 14 (not (WindChange :? :? :? :? :? :? :? :? :? :?) nil nil) "ws:WindChange First" 0 (:?fids) #object[clojure.core$eval14019$fn__14020 0x4cbf2d10 "clojure.core$eval14019$fn__14020@4cbf2d10"])
(e 16 ((WindChange true :? :? :? :? :? :? :? :? :?) nil nil) "ws:WindChange Update")
(x 14 ((WindChange :?ass :? :? :? :? :? :? :? :? :?) (:?ass) #object[clojure.core$eval14023$fn__14024 0x74685281 "clojure.core$eval14023$fn__14024@74685281"]) "ws:WindChange Update" -1 (:?fids) #object[clojure.core$eval14027$fn__14028 0x27d8a2ac "clojure.core$eval14027$fn__14028@27d8a2ac"])
(e 0 ((CZMLGenerator :? :? :?) nil nil) "ss:Mark on Map")
(i 17 ((Mark :? :? :? :? :? :? :? :?lab :?lat :? :?lon :? :? :? :? :?url :?) nil nil))
(i 2 ((Clock :? :?t) nil nil))
(x 3 (not (CZMLSpan :? :?lab :?) nil nil) "ss:Mark on Map" 0 (:?lon :?lab :?lat :?t) #object[clojure.core$eval14031$fn__14032 0x762a0a8d "clojure.core$eval14031$fn__14032@762a0a8d"])
(e 17 ((Mark :? :? :? :? :? :? :? :?mark :? :? :? :? :? :? :? :? :?) nil nil) "ss:Skipper Status")
(i 6 ((Wind :?wnd :? :? :? :? :? :?) nil nil))
(i 18 ((Skipper :?boat :? :?e :? :? :?mark :? :? :?sts :?) (:?sts) #object[clojure.core$eval14036$fn__14037 0x43487ef5 "clojure.core$eval14036$fn__14037@43487ef5"]))
(i 1 ((Boat :? :? :?boat :? :? :? :?taa) nil nil))
(x 2 ((Clock :? :?) nil nil) "ss:Skipper Status" 0 (:?fids :?boat :?wnd :?mark :?e :?taa :?sts) #object[clojure.core$eval14040$fn__14041 0x7502c047 "clojure.core$eval14040$fn__14041@7502c047"])
(e 17 ((Mark :? :? :? :? :? :? :? :?mark :? :? :? :? :? :? :? :? :?) nil nil) "ss:Gainful Beating Course")
(i 19 ((Skipper :?boat :? :?e :? :? :?mark :? :? BEATING :?) nil nil))
(i 1 ((Boat :? :? :?boat :? :? :? :?taa) nil nil))
(i 6 ((Wind :?wnd :? :? :? :? :? :?) nil nil))
(x 20 (not (Advice :?boat :? :? "BIG HEADER NEW COURSE") nil nil) "ss:Gainful Beating Course" 0 (:?boat :?wnd :?mark :?e :?taa) #object[clojure.core$eval14046$fn__14047 0x172dc189 "clojure.core$eval14046$fn__14047@172dc189"])
(e 17 ((Mark :? :? :? :? :? :? :? :?mark :? :? :? :? :? :? :? :? :?) nil nil) "ss:Select on Mark Course")
(i 21 ((Skipper :?boat :? :? :? :? :?mark :? :? CAN-ON-MARK :?) nil nil))
(i 1 ((Boat :? :? :?boat :? :? :? :?) nil nil))
(x 6 ((Wind :?wnd :? :? :? :? :? :?) nil nil) "ss:Select on Mark Course" 0 (:?boat :?mark) #object[clojure.core$eval14052$fn__14053 0x3175cf83 "clojure.core$eval14052$fn__14053@3175cf83"])
(e 22 ((Route :? :?mm :?tit) nil nil) "ss:Mark Near and Abaft")
(i 17 ((Mark :? :? :? :? :? :? :? :?mark :? :? :? :? :? :? :? :? :?) nil nil))
(i 18 ((Skipper :?boat :? :? :? :?lap :?mark :?rad :?tit :?sts :?) (:?sts) #object[clojure.core$eval14058$fn__14059 0x314ab08e "clojure.core$eval14058$fn__14059@314ab08e"]))
(i 1 ((Boat :? :? :?boat :? :? :? :?) nil nil))
(x 2 ((Clock :? :?) (:?rad :?boat :?mark) #object[clojure.core$eval14063$fn__14064 0x52294e18 "clojure.core$eval14063$fn__14064@52294e18"]) "ss:Mark Near and Abaft" 0 (:?tit :?mm :?fids :?boat :?mark :?lap) #object[clojure.core$eval14067$fn__14068 0x2bf1ec5d "clojure.core$eval14067$fn__14068@2bf1ec5d"])
(e 22 ((Route :? :?mm :?tit) nil nil) "ss:Start Route")
(x 23 ((Skipper :?boat :? :? :? 0 "NIL" :? :?tit :? :?) nil nil) "ss:Start Route" 0 (:?tit :?mm :?fids :?boat) #object[clojure.core$eval14071$fn__14072 0x34e72777 "clojure.core$eval14071$fn__14072@34e72777"])
(e 19 ((Skipper :?boat :? :?e :? :? :? :? :? BEATING :?) nil nil) "ss:Big Header on Beating")
(i 24 ((BoatWindShift :?boat :? HEADER) nil nil))
(i 1 ((Boat :? :? :?boat :? :? :?tack :?taa) nil nil))
(i 6 ((Wind :?dir :? :? :? :? :? :?sid) (:?sid) #object[clojure.core$eval14076$fn__14077 0x504d3fa5 "clojure.core$eval14076$fn__14077@504d3fa5"]))
(x 20 (not (Advice :?boat :? :? "BIG HEADER NEW COURSE") nil nil) "ss:Big Header on Beating" -1 (:?dir :?tack :?boat :?e :?taa) #object[clojure.core$eval14080$fn__14081 0x480cf23a "clojure.core$eval14080$fn__14081@480cf23a"])
(e 20 ((Advice :? :?dir1 :? "BIG HEADER NEW COURSE") nil nil) "ss:End of Big Header")
(x 6 ((Wind :?dir2 :? :? :? :? :? :?) (:?dir2 :?dir1) #object[clojure.core$eval14084$fn__14085 0x6cbb7c62 "clojure.core$eval14084$fn__14085@6cbb7c62"]) "ss:End of Big Header" 0 (:?fids) #object[clojure.core$eval14088$fn__14089 0x61ea221d "clojure.core$eval14088$fn__14089@61ea221d"])
(e 18 ((Skipper :?boat :?del :?e :? :? :? :? :? :? :?) nil nil) "ss:Shore Ahead")
(i 6 ((Wind :?wnd :? :? :? :? :? :?) nil nil))
(i 1 ((Boat :?crs :? :?boat :? :? :?tack :?taa) nil nil))
(i 25 ((ShoreCheck :? :? SHORE-AHEAD :? :?) nil nil))
(x 2 ((Clock :? :?t) nil nil) "ss:Shore Ahead" 0 (:?tack :?crs :?fids :?boat :?wnd :?del :?t :?e :?taa) #object[clojure.core$eval14092$fn__14093 0x58e38992 "clojure.core$eval14092$fn__14093@58e38992"])
(e 26 ((Skipper :?boat :? :? :? :? :? :? :? OFF-SHORE :?t1) nil nil) "ss:Gone off Shore")
(x 2 ((Clock :? :?t2) (:?t1 :?t2) #object[clojure.core$eval14100$fn__14101 0x77d12d96 "clojure.core$eval14100$fn__14101@77d12d96"]) "ss:Gone off Shore" 0 (:?fids :?boat) #object[clojure.core$eval14104$fn__14105 0x40be1762 "clojure.core$eval14104$fn__14105@40be1762"])
(ex 27 ((ShoreControl :?del :? :? :?) nil nil) "scs:Print Shore Check Interval" 0 (:?del) #object[clojure.core$eval14108$fn__14109 0x70742fa2 "clojure.core$eval14108$fn__14109@70742fa2"])
(e 27 ((ShoreControl :?del :? :? :?) nil nil) "scs:Start Shore Check")
(i 28 ((ShoreCheck :?boat :? START :? :?) nil nil))
(x 2 ((Clock :? :?t) nil nil) "scs:Start Shore Check" 0 (:?fids :?boat :?del :?t) #object[clojure.core$eval14112$fn__14113 0x341f9727 "clojure.core$eval14112$fn__14113@341f9727"])
(e 27 ((ShoreControl :?del :?dis :? :?sho) nil nil) "scs:Repeat Shore Check")
(i 29 ((ShoreCheck :?boat :? REPEAT :?oter :?t1) nil nil))
(i 1 ((Boat :?crs :? :?boat :? :? :? :?) nil nil))
(x 2 ((Clock :? :?t2) (:?t1 :?t2) #object[clojure.core$eval14117$fn__14118 0x4a5ca1af "clojure.core$eval14117$fn__14118@4a5ca1af"]) "scs:Repeat Shore Check" 0 (:?sho :?dis :?crs :?fids :?boat :?del :?t2 :?oter) #object[clojure.core$eval14121$fn__14122 0x7ae9aa81 "clojure.core$eval14121$fn__14122@7ae9aa81"])
(e 0 ((CZMLGenerator :?del :? :?vis) nil nil) "cz:CZML Leg Generation")
(i 7 ((Onboard :?boat :?heel :? :?) nil nil))
(i 3 ((CZMLSpan :? :?lab :?tim) (:?lab :?boat) #object[clojure.core$eval14133$fn__14134 0x2b318341 "clojure.core$eval14133$fn__14134@2b318341"]))
(x 2 ((Clock :? :?t) (:?tim :?t) #object[clojure.core$eval14137$fn__14138 0x63df8faf "clojure.core$eval14137$fn__14138@63df8faf"]) "cz:CZML Leg Generation" -1 (:?heel :?lab :?fids :?boat :?del :?vis :?t) #object[clojure.core$eval14141$fn__14142 0x4c210ba2 "clojure.core$eval14141$fn__14142@4c210ba2"])
