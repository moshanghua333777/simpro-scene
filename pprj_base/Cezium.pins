; Sun Oct 14 11:49:03 MSK 2018
; 
;+ (version "3.5")
;+ (build "Build 663")

([Cezium_Class0] of  ClsRequired

	(cloFunctions
		[Cezium_Class6]
		[Cezium_Class7]
		[Cezium_Class8]
		[Cezium_Class70000]
		[Cezium_Class9]
		[Cezium_Class10]
		[Cezium_Class11]
		[Cezium_Class12]
		[Cezium_Class13]
		[Cezium_Class110001]
		[Cezium_Class110002])
	(cloNamespace [Cezium_Class1])
	(cloVars
		[Cezium_Class2]
		[Cezium_Class3]
		[Cezium_Class4]
		[Cezium_Class5]
		[Cezium_Class80000]
		[Cezium_Class100000]
		[Cezium_Class90017]
		[Cezium_Class110000])
	(documentation [Cezium_Class14])
	(title "Cezium Client"))

([Cezium_Class1] of  CloNamespace

	(source "(:require\n  [geo.calc :refer [future-pos-js]])")
	(title "czm.core"))

([Cezium_Class10] of  CloFunction

	(source "(let [pitch (condp = (:view @CAMERA)\n                \"UP\" 90\n                \"DOWN\" -90\n                (:pitch @CAMERA))\n        roll (:roll @CAMERA)\n        head (norm-crs (condp = (:view @CAMERA)\n                         \"BACKWARD\" (+ crs 180)\n                         \"RIGHT\" (+ crs 90)\n                         \"LEFT\" (- crs 90)\n                         \"FORWARD-RIGHT\" (+ crs 45)\n                         \"FORWARD-LEFT\" (- crs 45)\n                         \"BACKWARD-RIGHT\" (+ crs 135)\n                         \"BACKWARD-LEFT\" (- crs 135)\n                         crs))]\n    (if (> alt MAX-UPGROUND) \n      (fly-control lat lon alt head pitch roll per)\n      (do (def FLY-CTL [lat lon alt head pitch roll per])\n        (js/terraHeightRequest TERR-PROV lat lon terraHeightResponse))))")
	(title "fly-to [lat lon alt crs per]"))

([Cezium_Class10000] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([Cezium_Class100000] of  CloVar

	(source "0")
	(title "AAT"))

([Cezium_Class10001] of  CloFunction

	(source "(enable-console-print!)\n(czm/init-3D-view BASE-URL \"yes\")\n(repeater receive-vehicle 1000)\n(repeater! send-terrain TERRAIN-TIO)\n(show-controls)")
	(title "on-load []"))

([Cezium_Class10002] of  CloFunction

	(source "(GET (str BASE-URL \"vehicle/\") \n	{:handler vehicle-hr\n                         :error-handler error-handler})")
	(title "receive-vehicle []"))

([Cezium_Class10005] of  CloVar

	(source "\"http://localhost:4444/\"")
	(title "BASE-URL"))

([Cezium_Class10006] of  CloVar

	(source "(volatile! 4000)")
	(title "TERRAIN-TIO"))

([Cezium_Class10007] of  CloVar

	(source "(fn [response]\n  (let [{:keys [status status-text]} response]\n    (println (str \"AJAX ERROR: \" status \" \" status-text))))")
	(title "error-handler"))

([Cezium_Class10008] of  CloFunction

	(source "(let [resp (read-transit response)]\n  ;;(println :V-RESP resp)\n  (if-let [{:keys [vehicle period camera]} resp]\n    (vehicle-period-camera vehicle period camera)))")
	(title "vehicle-hr [response]"))

([Cezium_Class10009] of  CloFunction

	(source "(t/read (t/reader :json) x)")
	(title "read-transit [x]"))

([Cezium_Class10010] of  CloFunction

	(source "(let [[lat lon] (:coord vehicle)\n       alt (:altitude vehicle)\n       alt (int (if (< alt czm/MAX-UPGROUND) \n	czm/AAT\n	alt))]\n  (vswap! VEHICLE merge vehicle)\n  (set-html! \"onboard-fld\" (:name vehicle))\n  (set-html! \"name-fld\" (:name vehicle))\n  (set-html! \"course-fld\" (:course vehicle))\n  (set-html! \"speed-fld\" (:speed vehicle))\n  (set-html! \"altitude-fld\" alt)\n  (if (<= period 0)\n    (czm/move-to lat lon \n	(:altitude vehicle)\n	(:course vehicle))\n    (czm/fly-to lat lon \n	(:altitude vehicle)\n	(:course vehicle) \n	period))\n  (if-let [{:keys [view pitch roll]} camera]\n    (camera-control view pitch roll)))")
	(title "vehicle-period-camera [vehicle period camera]"))

([Cezium_Class11] of  CloFunction

	(source "(let [pitch (condp = (:view @CAMERA)\n                \"UP\" 90\n                \"DOWN\" -90\n                (:pitch @CAMERA))\n        roll (:roll @CAMERA)\n        head (norm-crs (condp = (:view @CAMERA)\n                         \"BACKWARD\" (+ crs 180)\n                         \"RIGHT\" (+ crs 90)\n                         \"LEFT\" (- crs 90)\n                         \"FORWARD-RIGHT\" (+ crs 45)\n                         \"FORWARD-LEFT\" (- crs 45)\n                         \"BACKWARD-RIGHT\" (+ crs 135)\n                         \"BACKWARD-LEFT\" (- crs 135)\n                         crs))]\n    (move-control lat lon alt head pitch roll))")
	(title "move-to [lat lon alt crs]"))

([Cezium_Class110000] of  CloVar

	(source "0")
	(title "TERRAIN"))

([Cezium_Class110001] of  CloFunction

	(source "(def TERRAIN (.-height (first pos)))")
	(title "terraHeightResponse2 [pos]"))

([Cezium_Class110002] of  CloFunction

	(source "(if (< lat 90)\n  (js/terraHeightRequest TERR-PROV lat lon terraHeightResponse2)\n  (def TERRAIN -1))")
	(title "terrain-request [lat lon]"))

([Cezium_Class110003] of  CloVar

	(source "(volatile!\n{:terrain 0\n  :latlon [0 0]\n  :interval 4000\n  :intl-upd 4000})")
	(title "TERRA-CTL"))

([Cezium_Class12] of  CloFunction

	(source "(vswap! CAMERA assoc key val)")
	(title "camera [key val]"))

([Cezium_Class120000] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout @time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout @time-out)))))")
	(title "repeater!"))

([Cezium_Class120001] of  CloFunction

	(source "([]\n  (@TERRA-CTL :interval))\n([inter]\n  (vswap! TERRA-CTL assoc :intl-upd inter))")
	(title "terrain-interval"))

([Cezium_Class13] of  CloFunction

	(source ";;(if (= terra \"yes\")\n;;  (set! (.-terrainProvider VIEWER) TERR-PROV))\n(.add (.-dataSources VIEWER) CZM-SRC)\n(.addEventListener (js/EventSource. (str base-url \"czml/\")) \"czml\" cz-processor false)\n(println [:INIT-3D-VIEW :BASE base-url :TERRA terra])")
	(title "init-3D-view [base-url terra]"))

([Cezium_Class130000] of  CloFunction

	(source "(vswap! TERRA-CTL assoc :latlon [lat lon] :terrain -1)")
	(title "request-terrain [lat lon]"))

([Cezium_Class14] of  CloDocumentation

	(source "<html>\n  <head>\n    <style type=\"text/css\">\n      <!--\n        body { font-family: arial; font-size: 12pt }\n        p { font-family: arial; margin-top: 2; margin-right: 2; margin-bottom: 2; margin-left: 2 }\n      -->\n    </style>\n    \n  </head>\n  <body>\n    <b>Cesium Client<br></b><br>API<br><br>1. fly-to [lat lon alt crs per]<br>2. camera [key val], keys: :view, :altitude, :pitch, :roll<br><br>CZML rendering support<br><br>Initialization: (init-3D-view)</body>\n</html>"))

([Cezium_Class140000] of  CloFunction

	(source "(@TERRA-CTL :terrain)")
	(title "terrain []"))

([Cezium_Class15] of  ClsMain

	(asset-path "js/out")
	(butt-build "Build/cljs.compile/build")
	(cloFunctions
		[Cezium_Class10000]
		[Cezium_Class120000]
		[Cezium_Class10009]
		[Cezium_Class60000]
		[Cezium_Class60002]
		[Cezium_Class60006]
		[Cezium_Class60003]
		[Cezium_Class60004]
		[Cezium_Class60005]
		[Cezium_Class50003]
		[Cezium_Class10010]
		[Cezium_Class10008]
		[Cezium_Class10002]
		[Cezium_Class50002]
		[Cezium_Class50001]
		[Cezium_Class60001]
		[Cezium_Class60007]
		[Cezium_Class60008]
		[Cezium_Class10001])
	(cloNamespace [Cezium_Class16])
	(cloVars
		[Cezium_Class17]
		[Cezium_Class10005]
		[Cezium_Class10006]
		[Cezium_Class10007])
	(compiler-options "{:verbose false}")
	(css [Cezium_Class20002])
	(epilogue "(set! (.-onload js/window) (on-load))")
	(html [Cezium_Class20000])
	(output-dir "resources/public/js/out")
	(output-to "resources/public/js/main.js")
	(required
		[Cezium_Class0]
		[Cezium_Class90000])
	(store-in "src/cljs")
	(title "View 3D Client"))

([Cezium_Class16] of  CloNamespace

	(source "(:require\n  [goog.string :as gstring]\n  [goog.string.format]\n  [cljs.core.async :refer [<! timeout close!]]\n  [cognitect.transit :as t]\n  [ajax.core :refer (GET)]\n  [cljs.reader :as rdr]\n  [geo.calc :refer [norm-crs]]\n  [czm.core :as czm])\n(:require-macros \n  [cljs.core.async.macros :refer [go]])")
	(title "view3d.client"))

([Cezium_Class17] of  CloVar

	(source "(volatile! {:name \"Аврора\"\n               :coord [60 30]\n               :altitude 4000\n               :speed 160\n               :course 270})")
	(title "VEHICLE"))

([Cezium_Class2] of  CloVar

	(source "(js/Cesium.createWorldTerrain)")
	(title "TERR-PROV"))

([Cezium_Class20000] of  HTML

	(source "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Cockpit View</title>\n    <link rel=\"stylesheet\" href=\"css/cesium.css\" />\n    <script src=\"Cesium/Cesium.js\"></script>\n    <style>\n      @import url(Cesium/Widgets/widgets.css);\n      #cesiumContainer {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        margin: 0;\n        overflow: hidden;\n        padding: 0;\n        font-family: sans-serif;\n      }\n      html {\n        height: 100%;\n      }\n      body {\n        padding: 0;\n        margin: 0;\n        overflow: hidden;\n        height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"cesiumContainer\"></div>\n    <div id=\"vehicle\"></div>\n    <div id=\"name\"></div><div id=\"name-fld\"></div>\n    <div id=\"course\"></div><div id=\"course-fld\"></div>\n    <div id=\"speed\"></div><div id=\"speed-fld\"></div>\n    <div id=\"altitude\"></div><div id=\"altitude-fld\"></div>\n    <div id=\"camera\"></div>\n    <div id=\"onboard\"></div><div id=\"onboard-fld\"></div>\n    <div id=\"view\"></div><div id=\"view-fld\"></div>\n    <div id=\"pitch\"></div><div id=\"pitch-fld\"></div>\n    <div id=\"roll\"></div><div id=\"roll-fld\"></div>\n    <script>\n      // Grant your CesiumJS app access to your ion assets\n      // This is your actual default access token, you can copy/paste this directly into your app code\n      Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIwN2EzYzEyNS1mMmNlLTRlYjEtYjRiMS04OTliNjhkZjI4NzQiLCJpZCI6MzY0MCwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTUzODQxODg5OH0.E2p7oe8fLJOtyawv0uT9zBZw4oyKZ6Vt3CZsE0FKeJw';\n      function terraHeightRequest(terrProv, lat, lon, func){\n        var pos = [Cesium.Cartographic.fromDegrees(lon, lat)];\n        var pms = Cesium.sampleTerrain(terrProv, 11, pos);\n        Cesium.when(pms, func);\n      }\n    </script>\n    <script type=\"text/javascript\" src=\"js/main.js\"></script>\n  </body>\n</html>")
	(store-in "resources/public")
	(title "cezium"))

([Cezium_Class20002] of  CSS

	(source "#vehicle {\n  position:fixed;\n  bottom:140px;\n  right:40px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#name {\n  position:fixed;\n  bottom:130px;\n  right:70px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#course {\n  position:fixed;\n  bottom:110px;\n  right:70px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#speed {\n  position:fixed;\n  bottom:90px;\n  right:70px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude {\n  position:fixed;\n  bottom:70px;\n  right:70px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#name-fld {\n  position:fixed;\n  bottom:130px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:cyan\n}\n#course-fld {\n  position:fixed;\n  bottom:110px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#speed-fld {\n  position:fixed;\n  bottom:90px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#altitude-fld {\n  position:fixed;\n  bottom:70px;\n  right:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#camera {\n  position:fixed;\n  bottom:140px;\n  left:60px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard {\n  position:fixed;\n  bottom:130px;\n  left:20px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#onboard-fld {\n  position:fixed;\n  bottom:130px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n  color:cyan\n}\n#view {\n  position:fixed;\n  bottom:110px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#view-fld {\n  position:fixed;\n  bottom:110px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#pitch {\n  position:fixed;\n  bottom:90px;\n  left:42px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#pitch-fld {\n  position:fixed;\n  bottom:90px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}\n#roll {\n  position:fixed;\n  bottom:70px;\n  left:48px;\n  padding:5px;\n  z-index:100;\n  color:yellow\n}\n#roll-fld {\n  position:fixed;\n  bottom:70px;\n  left:84px;\n  padding:5px;\n  z-index:100;\n}")
	(store-in "resources/public/css")
	(title "cesium"))

([Cezium_Class3] of  CloVar

	(source "(js/Cesium.Viewer. \n  \"cesiumContainer\" \n  #js{:imageryProvider (js/Cesium.createWorldImagery)\n        :terrainProvider (js/Cesium.createWorldTerrain)\n        :animation false})")
	(title "VIEWER"))

([Cezium_Class30000] of  ShareOnto

	(but-deep-copy "Deep Copy Instance/share.onto/deep-copy")
	(but-del-fil "Delete Filtered Instances/share.onto/delfil")
	(but-del-unref "Delete Unreferenced/share.onto/delete-unref")
	(but-find-unref "Find Unreferenced/share.onto/find-unref")
	(but-load-prj "Load Source Project/share.onto/load-src-prj")
	(but-shal-copy "Shallow Copy Instances/share.onto/shal-copy")
	(source-project "DefaultKnowledgeBase(FlightPro)"))

([Cezium_Class30026] of  CloProgram

	(cloFunctions
		[Cezium_Class30033]
		[Cezium_Class30041]
		[Cezium_Class30034]
		[Cezium_Class30036]
		[Cezium_Class50000]
		[Cezium_Class30037]
		[Cezium_Class30038]
		[Cezium_Class30039]
		[Cezium_Class70005]
		[Cezium_Class120001]
		[Cezium_Class130000]
		[Cezium_Class140000])
	(cloNamespace [Cezium_Class30027])
	(cloVars
		[Cezium_Class30029]
		[Cezium_Class30030]
		[Cezium_Class30031]
		[Cezium_Class30032]
		[Cezium_Class30042]
		[Cezium_Class110003])
	(title "Pro Server"))

([Cezium_Class30027] of  CloNamespace

	(source "(:use protege.core)\n(:require [ring.adapter.jetty :as jetty]\n              [ring.util.response :as r]\n              [compojure.core :refer [defroutes GET]]\n              [compojure.handler :as handler]\n              [compojure.route :as route]\n              [cognitect.transit :as t]\n              [cesium.core :as czs])\n(:import java.io.ByteArrayOutputStream\n             ru.igis.omtab.OMT\n             edu.stanford.smi.protege.ui.DisplayUtilities)")
	(title "pro.server"))

([Cezium_Class30029] of  CloVar

	(source "4444")
	(title "PORT"))

([Cezium_Class30030] of  CloVar

	(source "(str (System/getProperty \"user.dir\") \"/resources/public/\")")
	(title "ROOT"))

([Cezium_Class30031] of  CloVar

	(source "nil")
	(title "APP"))

([Cezium_Class30032] of  CloVar

	(source "nil")
	(title "SERV"))

([Cezium_Class30033] of  CloFunction

	(source "(let [baos (ByteArrayOutputStream.)\n        w    (t/writer baos :json)\n        _    (t/write w x)\n        ret  (.toString baos)]\n    (.reset baos)\n    ret)")
	(title "write-transit [x]"))

([Cezium_Class30034] of  CloFunction

	(source "(-> (r/response (write-transit (deref (future-call func0))))\n       (r/header \"Access-Control-Allow-Origin\" \"*\")\n       (r/charset \"UTF-8\"))")
	(title "response-func0 [func0]"))

([Cezium_Class30036] of  CloFunction

	(source "(let [address (str \"http://localhost:\" PORT)]\n  (println \"Location:\" address)\n  (when (java.awt.Desktop/isDesktopSupported)\n    (.browse (java.awt.Desktop/getDesktop) (java.net.URI. address))))")
	(title "view3D-in-browser []"))

([Cezium_Class30037] of  CloFunction

	(source "(defroutes app-routes\n  (GET \"/\" [] (slurp (str ROOT \"cezium.html\")))\n  (GET \"/czml/\" [] (czs/events))\n  (GET \"/vehicle/\" [] (response-func0 mp-vehicle-period-camera))\n  (GET \"/terrain/\" [& params] (response-func0 #(receive-terrain params)))\n  (route/files \"/\" (do (println [:ROOT-FILES ROOT]) {:root ROOT}))\n  (route/resources \"/\")\n  (route/not-found \"Pro Server: Not Found!\"))\n\n(def APP\n  (handler/site app-routes))")
	(title "init-server []"))

([Cezium_Class30038] of  CloFunction

	(source "([]\n    (start-server PORT))\n([port]\n  (if (nil? APP)\n    (init-server))\n  (def SERV (jetty/run-jetty APP {:port port :join? false})))\n([hm inst]\n  (start-server))")
	(title "start-server"))

([Cezium_Class30039] of  CloFunction

	(source "([]\n  (when-let [serv SERV]\n    (.stop serv)\n    (def SERV nil)\n    (println \"Server stopped!\")))\n([hm inst]\n  (stop-server))")
	(title "stop-server"))

([Cezium_Class30041] of  CloFunction

	(source "(if-let [onb @ONBOARD]\n  (if-let [mo (OMT/getMapOb onb)]\n    (let [spd (.getSpeed mo)]\n      (.putAttribute mo \"ROAD-SPEED\" spd)\n      {:vehicle\n        {:name onb\n         :coord [(.getLatitude mo) (.getLongitude mo)]\n         :altitude (.getAltitude mo)\n         :speed spd\n         :course (.getCourse mo)}\n       :period 1\n       :camera (.getAttribute mo \"CAMERA\")})))")
	(title "mp-vehicle-period-camera []"))

([Cezium_Class30042] of  CloVar

	(source "(volatile! nil)")
	(title "ONBOARD"))

([Cezium_Class30043] of  CloProgram

	(cloFunctions
		[Cezium_Class30047]
		[Cezium_Class30048]
		[Cezium_Class30049]
		[Cezium_Class30050]
		[Cezium_Class30051]
		[Cezium_Class30052]
		[Cezium_Class30053]
		[Cezium_Class30054]
		[Cezium_Class30055])
	(cloNamespace [Cezium_Class30044])
	(cloVars
		[Cezium_Class30045]
		[Cezium_Class30046])
	(title "Cesium Server"))

([Cezium_Class30044] of  CloNamespace

	(source "(:require\n    [ring.util.response :as r]\n    [async.proc :as asp])\n(:import java.util.Calendar)")
	(title "cesium.core"))

([Cezium_Class30045] of  CloVar

	(source "(asp/mk-chan)")
	(title "CZ-CHAN"))

([Cezium_Class30046] of  CloVar

	(source "true")
	(title "DOC-SND"))

([Cezium_Class30047] of  CloFunction

	(source "(println [:CZ-EVT typ dat])\n(asp/pump-in CZ-CHAN [typ (.trim dat)])")
	(title "send-event [typ dat]"))

([Cezium_Class30048] of  CloFunction

	(source "(let [evt-hr (fn [[typ dat]]\n                   (str \"event: \" typ \"\\ndata: \" dat \"\\n\\n\"))\n       ee (deref (future (asp/pump-out CZ-CHAN)))\n       resp (if (seq ee)\n                 (apply str (map evt-hr ee))\n                 \"\")]\n  (-> (r/response resp)\n         (r/header \"Access-Control-Allow-Origin\" \"*\")\n         (r/header \"Content-Type\" \"text/event-stream;charset=utf-8\")))")
	(title "events []"))

([Cezium_Class30049] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       yar (.get cld Calendar/YEAR )\n       mon (inc (.get cld Calendar/MONTH))\n       dat (.get cld Calendar/DATE)\n       hor (.get cld Calendar/HOUR_OF_DAY)\n       min (.get cld Calendar/MINUTE)\n       sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601curt []"))

([Cezium_Class30050] of  CloFunction

	(source "(let [cld (Calendar/getInstance)\n       mil (.getTimeInMillis cld)\n       _ (.setTimeInMillis cld (+ mil (* sec 1000)))\n        yar (.get cld Calendar/YEAR )\n        mon (inc (.get cld Calendar/MONTH))\n        dat (.get cld Calendar/DATE)\n        hor (.get cld Calendar/HOUR_OF_DAY)\n        min (.get cld Calendar/MINUTE)\n        sec (.get cld Calendar/SECOND)]\n    (format \"%04d-%02d-%02dT%02d:%02d:%02dZ\" yar mon dat hor min sec))")
	(title "iso8601futt [sec]"))

([Cezium_Class30051] of  CloFunction

	(source "(str \"{\\\"id\\\":\\\"document\\\",\\\"version\\\":\\\"1.0\\\",\\\"clock\\\":{\\\"currentTime\\\":\\\"\" (iso8601futt -16) \"\\\"}}\")")
	(title "doc []"))

([Cezium_Class30052] of  CloFunction

	(source "(when DOC-SND\n  (send-event \"czml\" (doc))\n  (def DOC-SND false))\n(let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"availability\\\":\\\"\"\n               (iso8601curt) \"/\" (iso8601futt span-sec)\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\" \n               scale\n               \" ,\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -24]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\"\n               lon\n               \", \"\n               lat\n               \", \"\n               alt\n               \"]}}\")]\n  (send-event \"czml\" p))")
	(title "location [label scale img-url lat lon alt span-sec]"))

([Cezium_Class30053] of  CloFunction

	(source "(when DOC-SND\n  (send-event \"czml\" (doc))\n  (def DOC-SND false))\n(let [p (str \"{\\\"id\\\":\\\"\"\n               label\n               \"\\\",\\\"label\\\":{\\\"scale\\\":\"\n               (/ scale 2)\n               \",\\\"pixelOffset\\\":{\\\"cartesian2\\\":[8, -8]},\\\"text\\\":\\\"\"\n               label\n               \"\\\"},\\\"billboard\\\":{\\\"scale\\\":\"\n               scale\n               \",\\\"image\\\":\\\"\"\n               img-url\n               \"\\\"},\\\"position\\\":{\\\"cartographicDegrees\\\":[\\\"\"\n               tim1\n               \"\\\", \"\n               lon1\n               \", \"\n               lat1\n               \", \"\n               alt1\n               \",\\\"\"\n               tim2\n               \"\\\", \"\n               lon2\n               \", \"\n               lat2\n               \", \"\n               alt2\n               \"]}}\")]\n  (send-event \"czml\" p))")
	(title "leg [label img-url scale [lat1 lon1 alt1 tim1] [lat2 lon2 alt2 tim2]]"))

([Cezium_Class30054] of  CloFunction

	(source "(let [min-scl 0.25\n       scl (+ min-scl (* (- 1 min-scl) (- 1 (/ dist max-dist))))]\n  (location txt scl \"img/arrdn.png\" lat lon 100 40))")
	(title "point-out [txt [lat lon] dist max-dist]"))

([Cezium_Class30055] of  CloFunction

	(source "(def DOC-SND true)")
	(title "new-doc []"))

([Cezium_Class4] of  CloVar

	(source "(js/Cesium.CzmlDataSource.)")
	(title "CZM-SRC"))

([Cezium_Class40000] of  CloProgram

	(cloFunctions
		[Cezium_Class40002]
		[Cezium_Class40003]
		[Cezium_Class40004]
		[Cezium_Class40005]
		[Cezium_Class40006]
		[Cezium_Class40007]
		[Cezium_Class40008]
		[Cezium_Class40009]
		[Cezium_Class40010]
		[Cezium_Class40011])
	(cloNamespace [Cezium_Class40001])
	(title "Async Processing"))

([Cezium_Class40001] of  CloNamespace

	(source "(:require \n  [clojure.core.async :refer [chan alts!! put! <! <!! go timeout close!]])")
	(title "async.proc"))

([Cezium_Class40002] of  CloFunction

	(source "([func time-out]\n  (go (while true\n           (func)\n           (<! (timeout time-out)))))\n([func param time-out]\n  (go (while true\n           (func param)\n           (<! (timeout time-out)))))")
	(title "repeater"))

([Cezium_Class40003] of  CloFunction

	(source "(when (not= @status \"RUN\") \n  (vreset! status \"RUN\")\n  (go (do \n          (while (and (= @status \"RUN\")\n                            (proc-fn))\n                (<! (timeout time-out)))\n          (if (instance? clojure.lang.IFn final-fun) (final-fun))\n          (vreset! status \"STOP\")))\n  @status)")
	(title "start-process [status proc-fn time-out final-fun]"))

([Cezium_Class40004] of  CloFunction

	(source "(vreset! status \"FINISH\")")
	(title "stop-process [status]"))

([Cezium_Class40005] of  CloFunction

	(source "(= @status \"RUN\")")
	(title "running? [status]"))

([Cezium_Class40006] of  CloFunction

	(source "(put! chn val)")
	(title "pump-in [chn val]"))

([Cezium_Class40007] of  CloFunction

	(source "(loop [[bit ch] (alts!! [chn] :default :none) bits []]\n  (if (= bit :none)\n    bits\n    (recur (alts!! [chn] :default :none) (conj bits bit))))")
	(title "pump-out [chn]"))

([Cezium_Class40008] of  CloFunction

	(source "(loop [out []]\n  (if (empty? out)\n    (recur (<!! chn))\n    out))")
	(title "one-out [chn]"))

([Cezium_Class40009] of  CloFunction

	(source "(chan)")
	(title "mk-chan []"))

([Cezium_Class40010] of  CloFunction

	(source "(close! chn)")
	(title "close-chan [chn]"))

([Cezium_Class40011] of  CloFunction

	(source "(go (<! (timeout time))\n  (func))")
	(title "delayer [func time]"))

([Cezium_Class5] of  CloVar

	(source "(volatile! {:view \"FORWARD\"\n               :pitch -10\n               :roll 0})")
	(title "CAMERA"))

([Cezium_Class50000] of  CloFunction

	(source "(let [newterr (read-string (params :terrain))\n       {:keys [terrain latlon interval intl-upd]} @TERRA-CTL]\n  (if (> newterr 0)\n    (vswap! TERRA-CTL assoc :terrain newterr))\n  (cond\n    (< terrain 0) {:latlon latlon}\n    (not= interval intl-upd) (do (vswap! TERRA-CTL assoc :interval intl-upd)\n		{:interval interval})\n    true {:status 204}))")
	(title "receive-terrain [params]"))

([Cezium_Class50001] of  CloFunction

	(source "(GET (str BASE-URL \"terrain/\"\n                        \"?terrain=\" czm/TERRAIN)\n	{:handler send-terrain-hr\n                         :error-handler error-handler})")
	(title "send-terrain []"))

([Cezium_Class50002] of  CloFunction

	(source "(let [resp (read-transit response)]\n  ;; (println :ST-RESP resp)\n  (if-let [[lat lon] (resp :latlon)]\n    (czm/terrain-request lat lon)\n    (if (>= czm/TERRAIN 0)\n      (czm/terrain-request 100 200)))\n  (if-let [inter (resp :interval)]\n    (vreset! TERRAIN-TIO inter)))")
	(title "send-terrain-hr [response]"))

([Cezium_Class50003] of  CloFunction

	(source "(when vie\n  (view vie)\n  (set! (.-selectedIndex (by-id \"view-val\"))\n    (condp = vie\n      \"FORWARD\"	0\n      \"BACKWARD\"	1\n      \"RIGHT\"		2\n      \"LEFT\"		3\n      \"UP\"		4\n      \"DOWN\"		5\n      \"FORWARD-RIGHT\"	6\n      \"FORWARD-LEFT\"	7\n      \"BACKWARD-RIGHT\"	8\n      \"BACKWARD-LEFT\"	9\n      0)))\n(when pit\n  (pitch pit)\n  (.setAttribute (by-id \"pitch-val\") \"value\" pit))\n(when rol\n  (roll rol)\n  (.setAttribute (by-id \"roll-val\") \"value\" rol))")
	(title "camera-control [vie pit rol]"))

([Cezium_Class6] of  CloFunction

	(source "(cond\n   (> x 360) (- x 360)\n   (< x 0) (+ x 360)\n   true x)")
	(title "norm-crs [x]"))

([Cezium_Class60000] of  CloFunction

	(source "(.getElementById js/document id)")
	(title "by-id [id]"))

([Cezium_Class60001] of  CloFunction

	(source "(set-html! \"camera\" \"<h4>Camera</h4>\")\n(set-html! \"onboard\" \"Onboard:\")\n(set-html! \"onboard-fld\" \"\")\n(set-html! \"view\" \"View:\")\n(set-html! \"view-fld\" \n  \"<select onchange='javascript:view3d.client.view(this.value)' style='width:96px' id='view-val'>\n   <option value='FORWARD'>FORWARD</option>\n   <option value='BACKWARD'>BACKWARD</option>\n   <option value='RIGHT'>RIGHT</option>\n   <option value='LEFT'>LEFT</option>\n   <option value='UP'>UP</option>\n   <option value='DOWN'>DOWN</option>\n   <option value='FORWARD-RIGHT'>FORWARD-RIGHT</option>\n   <option value='FORWARD-LEFT'>FORWARD-LEFT</option>\n   <option value='BACKWARD-RIGHT'>BACKWARD-RIGHT</option>\n   <option value='BACKWARD-LEFT'>BACKWARD-LEFT</option>\n   </select>\")\n(set-html! \"pitch\" \"Pitch:\")\n(set-html! \"pitch-fld\" \n  \"<input value='-10' style='width:90px' id='pitch-val'\n               onchange='javascript:view3d.client.pitch(this.value)'>\")\n(set-html! \"roll\" \"Roll:\")\n(set-html! \"roll-fld\" \n  \"<input value='0' style='width:90px' id='roll-val'\n               onchange='javascript:view3d.client.roll(this.value)'>\")")
	(title "left-controls []"))

([Cezium_Class60002] of  CloFunction

	(source "(set! (.-innerHTML (.getElementById js/document id)) msg)")
	(title "set-html! [id msg]"))

([Cezium_Class60003] of  CloFunction

	(source "(czm/camera :view dir)")
	(title "view [dir]"))

([Cezium_Class60004] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :pitch deg)))")
	(title "pitch [deg]"))

([Cezium_Class60005] of  CloFunction

	(source "(let [deg (num-val deg)]\n  (if (<= -180 deg 180)\n    (czm/camera :roll deg)))")
	(title "roll [deg]"))

([Cezium_Class60006] of  CloFunction

	(source "(if (number? x) x (rdr/read-string x))")
	(title "num-val [x]"))

([Cezium_Class60007] of  CloFunction

	(source "(set-html! \"vehicle\" \"<h4>Vehicle</h4>\")\n(set-html! \"name\" \"Name:\")\n(set-html! \"name-fld\" \"\")\n(set-html! \"course\" \"Course:\")\n(set-html! \"course-fld\" \"\")\n(set-html! \"speed\" \"Speed:\")\n(set-html! \"speed-fld\" \"\")\n(set-html! \"altitude\" \"Altitude:\")\n(set-html! \"altitude-fld\" \"\")")
	(title "right-conterols []"))

([Cezium_Class60008] of  CloFunction

	(source "(right-conterols)\n(left-controls)")
	(title "show-controls []"))

([Cezium_Class7] of  CloFunction

	(source "(let [data (.-data e)\n       data (js/JSON.parse data)]\n  ;;(println [:CZML data])\n  (.process CZM-SRC data))")
	(title "cz-processor [e]"))

([Cezium_Class70000] of  CloFunction

	(source "(let [[lat lon alt head pitch roll per] FLY-CTL]\n  (def AAT (+ alt (.-height (first pos))))\n  (fly-control lat lon AAT head pitch roll per))")
	(title "terraHeightResponse [pos]"))

([Cezium_Class70005] of  CloFunction

	(source "([hm inst]\n  (if-let [sel (DisplayUtilities/pickInstanceFromCollection nil (OMT/getNavObInstances) 0 \"Select NavOb\")]\n    (let [lab (sv sel \"label\")]\n      (ssv inst \"onboard\" lab)\n      (vreset! ONBOARD lab))))\n([lab]\n  (when-let [inst (first (cls-instances \"CeziumControl\"))]\n    (ssv inst \"onboard\" lab)\n    (vreset! ONBOARD lab)))")
	(title "go-onboard"))

([Cezium_Class8] of  CloFunction

	(source "(let [dest (js/Cesium.Cartesian3.fromDegrees lon lat alt)]\n  (.flyTo (.-camera VIEWER)\n            #js{:destination dest\n                  :orientation #js{:heading (js/Cesium.Math.toRadians hea)\n                                           :pitch   (js/Cesium.Math.toRadians pit)\n                                           :roll    (js/Cesium.Math.toRadians rol)}\n                  :maximumHeight alt\n                  :duration per\n                  :easingFunction (fn [time] time)}))")
	(title "fly-control [lat lon alt hea pit rol per]"))

([Cezium_Class80000] of  CloVar

	(source "[0 0 0 0 0 0 0]")
	(title "FLY-CTL"))

([Cezium_Class9] of  CloFunction

	(source ";;(println :MC lat lon alt hea pit rol)\n(let [dest (js/Cesium.Cartesian3.fromDegrees lon lat alt)]\n  (.setView (.-camera VIEWER)\n            #js{:destination dest\n                  :orientation #js{:heading (js/Cesium.Math.toRadians hea)\n                                           :pitch   (js/Cesium.Math.toRadians pit)\n                                           :roll    (js/Cesium.Math.toRadians rol)}}))")
	(title "move-control [lat lon alt hea pit rol]"))

([Cezium_Class90000] of  ClsRequired

	(cloFunctions
		[Cezium_Class90018]
		[Cezium_Class90019]
		[Cezium_Class90002]
		[Cezium_Class90005]
		[Cezium_Class6])
	(cloNamespace [Cezium_Class90001])
	(title "Geo"))

([Cezium_Class90001] of  CloNamespace

	(title "geo.calc"))

([Cezium_Class90002] of  CloFunction

	(source "(let [cosphi1 (js/Math.cos phi1)\n       sinphi1 (js/Math.sin phi1)\n       cosaz (js/Math.cos az)\n       sinaz (js/Math.sin az)\n       sinc (js/Math.sin c)\n       cosc (js/Math.cos c)\n       phi2 (js/Math.asin (+ (* sinphi1 cosc) (* cosphi1 sinc cosaz)))\n       lam2 (+ (js/Math.atan2 (* sinc sinaz) (- (* cosphi1 cosc) (* sinphi1 sinc cosaz))) lambda0)]\n  [phi2 lam2])")
	(title "spherical-between-js [^double phi1 ^double lambda0 ^double c ^double az]"))

([Cezium_Class90005] of  CloFunction

	(source "(let [phi (radians lat)\n       lam (radians lon)\n       dir (radians crs)\n       way (* spd tim)\n       way (radians (/ way 60))\n       [phi2 lam2] (spherical-between-js phi lam way dir)]\n   [(degrees phi2) (degrees lam2)])")
	(title "future-pos-js [[lat lon] crs spd tim]"))

([Cezium_Class90017] of  CloVar

	(source "100")
	(title "MAX-UPGROUND"))

([Cezium_Class90018] of  CloFunction

	(source "(/ (* deg js/Math.PI) 180)")
	(title "radians [deg]"))

([Cezium_Class90019] of  CloFunction

	(source "(/ (* rad 180) js/Math.PI)")
	(title "degrees [rad]"))
